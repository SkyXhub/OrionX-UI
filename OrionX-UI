--[[
    SkyX Custom UI Library 
    A completely custom UI library built to look like Luna UI
    But with our own code, tailored for our specific needs
    
    Credits:
    - Inspired by Luna UI's design (Nebula Softworks)
    - Built by SkyX Team
]]

-- Define the SkyX UI Library
local SkyXUI = {
    Version = "1.0.0",
    Windows = {},
    Theme = nil,
    AntiBan = nil,
    ThemeSystem = nil,
    ConfigFolder = "SkyX"
}

--// Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

--// Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera

--// Utilities
local Utils = {}

-- Convert rgb color to hex
function Utils.RGBToHex(r, g, b)
    return string.format("#%02X%02X%02X", r, g, b)
end

-- Convert hex color to rgb
function Utils.HexToRGB(hex)
    hex = hex:gsub("#", "")
    return tonumber("0x" .. hex:sub(1, 2)), tonumber("0x" .. hex:sub(3, 4)), tonumber("0x" .. hex:sub(5, 6))
end

-- Create a tween
function Utils.Tween(instance, properties, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

-- Calculate text size
function Utils.CalculateTextSize(text, font, fontSize, frameSize)
    return TextService:GetTextSize(text, fontSize, font, frameSize)
end

-- Ripple effect for buttons
function Utils.CreateRipple(button)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.Parent = button
    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.ZIndex = button.ZIndex + 1
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple
    
    Utils.Tween(ripple, {Size = UDim2.new(1.5, 0, 1.5, 0), BackgroundTransparency = 1}, 0.5)
    
    task.spawn(function()
        task.wait(0.5)
        ripple:Destroy()
    end)
end

--// Theme System
local ThemeSystem = {
    Themes = {
        Default = {
            Main = Color3.fromRGB(25, 25, 25),
            Second = Color3.fromRGB(32, 32, 32),
            Stroke = Color3.fromRGB(60, 60, 60),
            Divider = Color3.fromRGB(60, 60, 60),
            Text = Color3.fromRGB(240, 240, 240),
            TextDark = Color3.fromRGB(150, 150, 150),
            Accent = Color3.fromRGB(60, 120, 224)
        },
        Ocean = {
            Main = Color3.fromRGB(24, 28, 39),
            Second = Color3.fromRGB(32, 36, 48),
            Stroke = Color3.fromRGB(46, 152, 209),
            Divider = Color3.fromRGB(46, 152, 209),
            Text = Color3.fromRGB(230, 240, 245),
            TextDark = Color3.fromRGB(180, 190, 210),
            Accent = Color3.fromRGB(46, 152, 209)
        },
        Forest = {
            Main = Color3.fromRGB(22, 36, 24),
            Second = Color3.fromRGB(32, 46, 34),
            Stroke = Color3.fromRGB(46, 176, 64),
            Divider = Color3.fromRGB(46, 176, 64),
            Text = Color3.fromRGB(245, 245, 235),
            TextDark = Color3.fromRGB(185, 195, 175),
            Accent = Color3.fromRGB(46, 176, 64)
        },
        Sunset = {
            Main = Color3.fromRGB(30, 20, 40),
            Second = Color3.fromRGB(40, 30, 50),
            Stroke = Color3.fromRGB(255, 140, 50),
            Divider = Color3.fromRGB(255, 140, 50),
            Text = Color3.fromRGB(255, 250, 240),
            TextDark = Color3.fromRGB(200, 190, 180),
            Accent = Color3.fromRGB(255, 140, 50)
        },
        Monochrome = {
            Main = Color3.fromRGB(15, 15, 15),
            Second = Color3.fromRGB(30, 30, 30),
            Stroke = Color3.fromRGB(120, 120, 120),
            Divider = Color3.fromRGB(120, 120, 120),
            Text = Color3.fromRGB(255, 255, 255),
            TextDark = Color3.fromRGB(160, 160, 160),
            Accent = Color3.fromRGB(120, 120, 120)
        }
    },
    CurrentTheme = "Default"
}

function ThemeSystem:GetTheme(themeName)
    return self.Themes[themeName] or self.Themes.Default
end

function ThemeSystem:ApplyTheme(instance, theme)
    if not instance or not theme then return end
    
    -- Apply theme colors based on object type
    if instance:IsA("Frame") then
        if instance.Name == "Background" then
            instance.BackgroundColor3 = theme.Main
        elseif instance.Name == "Sidebar" then
            instance.BackgroundColor3 = theme.Second
        elseif instance.Name:find("Button") then
            instance.BackgroundColor3 = theme.Second
        end
    elseif instance:IsA("TextLabel") or instance:IsA("TextButton") or instance:IsA("TextBox") then
        if instance.Name:find("Title") then
            instance.TextColor3 = theme.Text
        elseif instance.Name:find("Subtitle") or instance.Name:find("Description") then
            instance.TextColor3 = theme.TextDark
        end
    elseif instance:IsA("UIStroke") then
        instance.Color = theme.Stroke
    end
    
    -- Apply to all children
    for _, child in pairs(instance:GetChildren()) do
        self:ApplyTheme(child, theme)
    end
end

--// Anti-Ban System
local function SetupAntiBan()
    local AntiBan = {
        Initialized = false,
        Features = {
            AntiKick = true,
            AntiReport = true,
            AdminDetection = true,
            HWIDSpoofer = true,
            ScreenshotProtection = true,
            ChatFilter = true
        }
    }
    
    function AntiBan:Initialize()
        if self.Initialized then return end
        
        -- Setup anti-kick hook
        local oldNamecall
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local method = getnamecallmethod()
            local args = {...}
            
            if not checkcaller() then
                if method == "Kick" and AntiBan.Features.AntiKick then
                    return nil
                elseif method == "FireServer" and self.Name == "ReportPlayer" and AntiBan.Features.AntiReport then
                    return nil
                end
            end
            
            return oldNamecall(self, ...)
        end)
        
        -- Setup admin detection
        if self.Features.AdminDetection then
            for _, player in pairs(game.Players:GetPlayers()) do
                if player:GetRankInGroup(1200769) >= 10 then -- Roblox staff group
                    SkyXUI:Notify({
                        Title = "Admin Detected",
                        Content = player.Name .. " is a Roblox admin!",
                        Duration = 10
                    })
                end
            end
            
            game.Players.PlayerAdded:Connect(function(player)
                if player:GetRankInGroup(1200769) >= 10 then
                    SkyXUI:Notify({
                        Title = "Admin Detected",
                        Content = player.Name .. " is a Roblox admin!",
                        Duration = 10
                    })
                end
            end)
        end
        
        self.Initialized = true
        return true
    end
    
    function AntiBan:EnableAllProtections()
        for feature, _ in pairs(self.Features) do
            self.Features[feature] = true
        end
        return true
    end
    
    function AntiBan:DisableAllProtections()
        for feature, _ in pairs(self.Features) do
            self.Features[feature] = false
        end
        return true
    end
    
    function AntiBan:BlockKick(reason)
        print("SkyX Anti-Ban: Blocked kick attempt with reason: " .. (reason or "Unknown"))
        SkyXUI:Notify({
            Title = "SkyX Anti-Ban",
            Content = "Blocked kick attempt: " .. (reason or "Unknown"),
            Duration = 5
        })
        return true
    end
    
    return AntiBan
end

--// Create Notification Function
function SkyXUI:Notify(options)
    options = options or {}
    options.Title = options.Title or "Notification"
    options.Content = options.Content or "This is a notification"
    options.Duration = options.Duration or 5
    options.Image = options.Image or "rbxassetid://7733658504" -- Default info icon
    
    -- Create notification
    local Notification = Instance.new("Frame")
    Notification.Name = "Notification"
    Notification.BackgroundColor3 = self.Theme.Second
    Notification.Position = UDim2.new(1, -20, 0.915, 0)
    Notification.Size = UDim2.new(0, 300, 0, 80)
    Notification.AnchorPoint = Vector2.new(1, 1)
    Notification.BorderSizePixel = 0
    Notification.Parent = self.NotificationHolder
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Notification
    
    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(0, 15, 0.5, 0)
    Icon.Size = UDim2.new(0, 30, 0, 30)
    Icon.Image = options.Image
    Icon.AnchorPoint = Vector2.new(0, 0.5)
    Icon.Parent = Notification
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 60, 0, 15)
    Title.Size = UDim2.new(0, 230, 0, 20)
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = options.Title
    Title.TextColor3 = self.Theme.Text
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Notification
    
    local Content = Instance.new("TextLabel")
    Content.Name = "Content"
    Content.BackgroundTransparency = 1
    Content.Position = UDim2.new(0, 60, 0, 35)
    Content.Size = UDim2.new(0, 230, 0, 30)
    Content.Font = Enum.Font.Gotham
    Content.Text = options.Content
    Content.TextColor3 = self.Theme.TextDark
    Content.TextSize = 14
    Content.TextWrapped = true
    Content.TextXAlignment = Enum.TextXAlignment.Left
    Content.TextYAlignment = Enum.TextYAlignment.Top
    Content.Parent = Notification
    
    -- Animate notification
    Notification.Position = UDim2.new(1, 350, 0.915, 0)
    Utils.Tween(Notification, {Position = UDim2.new(1, -20, 0.915, 0)}, 0.5, Enum.EasingStyle.Quint)
    
    -- Remove notification after duration
    task.spawn(function()
        task.wait(options.Duration)
        Utils.Tween(Notification, {Position = UDim2.new(1, 350, 0.915, 0)}, 0.5, Enum.EasingStyle.Quint)
        task.wait(0.5)
        Notification:Destroy()
    end)
end

--// Create Main GUI
function SkyXUI:CreateInterface()
    -- Create Notification Holder
    self.NotificationHolder = Instance.new("Frame")
    self.NotificationHolder.Name = "NotificationHolder"
    self.NotificationHolder.BackgroundTransparency = 1
    self.NotificationHolder.Size = UDim2.new(1, 0, 1, 0)
    
    -- Try to parent to CoreGui
    local success, error = pcall(function()
        if syn then
            self.NotificationHolder.Parent = game:GetService("CoreGui")
        else
            local gui = Instance.new("ScreenGui")
            gui.Name = "SkyXNotifications"
            gui.ResetOnSpawn = false
            gui.Parent = game:GetService("CoreGui")
            self.NotificationHolder.Parent = gui
        end
    end)
    
    if not success then
        self.NotificationHolder.Parent = Player:WaitForChild("PlayerGui")
    end
end

--// Create Window Function
function SkyXUI:CreateWindow(options)
    options = options or {}
    options.Title = options.Title or "SkyX Hub"
    options.SubTitle = options.SubTitle or "by SkyX Team"
    options.TabWidth = options.TabWidth or 160
    options.Size = options.Size or UDim2.fromOffset(580, 460)
    options.Theme = options.Theme or "Default"
    options.Acrylic = options.Acrylic ~= false
    options.Icon = options.Icon or "rbxassetid://8834748103" -- SkyX logo
    
    -- Set current theme
    self.Theme = ThemeSystem:GetTheme(options.Theme)
    ThemeSystem.CurrentTheme = options.Theme
    
    -- Create interface if it doesn't exist
    if not self.NotificationHolder then
        self:CreateInterface()
    end
    
    -- Setup Anti-Ban System
    if not self.AntiBan then
        self.AntiBan = SetupAntiBan()
        self.AntiBan:Initialize()
    end
    
    -- Create Window
    local Window = {
        Tabs = {},
        TabButtons = {},
        ActiveTab = nil,
        Toggled = true,
        Position = options.Position
    }
    
    -- Create main GUI
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = HttpService:GenerateGUID(false)
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    
    -- Try to set IgnoreGuiInset and parent to CoreGui
    local success, error = pcall(function()
        ScreenGui.IgnoreGuiInset = true
        
        if syn then
            syn.protect_gui(ScreenGui)
            ScreenGui.Parent = game:GetService("CoreGui")
        else
            ScreenGui.Parent = game:GetService("CoreGui")
        end
    end)
    
    if not success then
        ScreenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    Window.ScreenGui = ScreenGui
    
    -- Create Main Frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.BackgroundColor3 = self.Theme.Main
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = options.Position or UDim2.new(0.5, 0, 0.5, 0)
    MainFrame.Size = options.Size
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.Parent = ScreenGui
    
    Window.MainFrame = MainFrame
    
    -- Add shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(1, 47, 1, 47)
    Shadow.Image = "rbxassetid://6015897843"
    Shadow.ImageColor3 = Color3.new(0, 0, 0)
    Shadow.ImageTransparency = 0.5
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Parent = MainFrame
    
    -- Add corner
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame
    
    -- Add acrylic blur if enabled
    if options.Acrylic then
        local Blur = Instance.new("BlurEffect")
        Blur.Name = "Blur"
        Blur.Size = 20
        Blur.Parent = game:GetService("Lighting")
        
        local Acrylic = Instance.new("Frame")
        Acrylic.Name = "Acrylic"
        Acrylic.BackgroundColor3 = Color3.new(0, 0, 0)
        Acrylic.BackgroundTransparency = 0.85
        Acrylic.BorderSizePixel = 0
        Acrylic.Size = UDim2.new(1, 0, 1, 0)
        
        local UICornerAcrylic = Instance.new("UICorner")
        UICornerAcrylic.CornerRadius = UDim.new(0, 8)
        UICornerAcrylic.Parent = Acrylic
        
        Acrylic.Parent = MainFrame
    end
    
    -- Create Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.BackgroundColor3 = self.Theme.Main
    TitleBar.BackgroundTransparency = 1
    TitleBar.Size = UDim2.new(1, 0, 0, 40)
    TitleBar.Parent = MainFrame
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.Size = UDim2.new(0, 200, 1, 0)
    Title.Font = Enum.Font.GothamBold
    Title.Text = options.Title
    Title.TextColor3 = self.Theme.Text
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TitleBar
    
    local SubTitle = Instance.new("TextLabel")
    SubTitle.Name = "SubTitle"
    SubTitle.BackgroundTransparency = 1
    SubTitle.Position = UDim2.new(0, Title.TextBounds.X + 25, 0, 0)
    SubTitle.Size = UDim2.new(0, 200, 1, 0)
    SubTitle.Font = Enum.Font.Gotham
    SubTitle.Text = options.SubTitle
    SubTitle.TextColor3 = self.Theme.TextDark
    SubTitle.TextSize = 14
    SubTitle.TextXAlignment = Enum.TextXAlignment.Left
    SubTitle.Parent = TitleBar
    
    -- Create Close Button
    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -30, 0, 10)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Image = "rbxassetid://7733717689"
    CloseButton.ImageColor3 = self.Theme.TextDark
    CloseButton.Parent = TitleBar
    
    CloseButton.MouseEnter:Connect(function()
        Utils.Tween(CloseButton, {ImageColor3 = Color3.fromRGB(255, 100, 100)}, 0.2)
    end)
    
    CloseButton.MouseLeave:Connect(function()
        Utils.Tween(CloseButton, {ImageColor3 = self.Theme.TextDark}, 0.2)
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        Utils.Tween(MainFrame, {Size = UDim2.new(0, MainFrame.Size.X.Offset, 0, 0)}, 0.5, Enum.EasingStyle.Quint)
        task.wait(0.5)
        ScreenGui:Destroy()
    end)
    
    -- Create Minimize Button
    local MinimizeButton = Instance.new("ImageButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Position = UDim2.new(1, -60, 0, 10)
    MinimizeButton.Size = UDim2.new(0, 20, 0, 20)
    MinimizeButton.Image = "rbxassetid://7733715400"
    MinimizeButton.ImageColor3 = self.Theme.TextDark
    MinimizeButton.Parent = TitleBar
    
    MinimizeButton.MouseEnter:Connect(function()
        Utils.Tween(MinimizeButton, {ImageColor3 = self.Theme.Text}, 0.2)
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        Utils.Tween(MinimizeButton, {ImageColor3 = self.Theme.TextDark}, 0.2)
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        Window.Toggled = not Window.Toggled
        if Window.Toggled then
            Utils.Tween(MainFrame, {Size = options.Size}, 0.5, Enum.EasingStyle.Quint)
        else
            Utils.Tween(MainFrame, {Size = UDim2.new(0, MainFrame.Size.X.Offset, 0, 40)}, 0.5, Enum.EasingStyle.Quint)
        end
    end)
    
    -- Create Sidebar
    local Sidebar = Instance.new("Frame")
    Sidebar.Name = "Sidebar"
    Sidebar.BackgroundColor3 = self.Theme.Second
    Sidebar.BorderSizePixel = 0
    Sidebar.Position = UDim2.new(0, 0, 0, 40)
    Sidebar.Size = UDim2.new(0, options.TabWidth, 1, -40)
    Sidebar.Parent = MainFrame
    
    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 8)
    SidebarCorner.Parent = Sidebar
    
    local SidebarCover = Instance.new("Frame")
    SidebarCover.Name = "SidebarCover"
    SidebarCover.BackgroundColor3 = self.Theme.Second
    SidebarCover.BorderSizePixel = 0
    SidebarCover.Position = UDim2.new(1, -8, 0, 0)
    SidebarCover.Size = UDim2.new(0, 8, 1, 0)
    SidebarCover.Parent = Sidebar
    
    -- Create Tab Container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.BackgroundTransparency = 1
    TabContainer.Position = UDim2.new(0, options.TabWidth, 0, 40)
    TabContainer.Size = UDim2.new(1, -options.TabWidth, 1, -40)
    TabContainer.Parent = MainFrame
    
    -- Make window draggable
    local isDragging = false
    local dragInput
    local dragStart
    local startPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)
    
    TitleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Create Tab List
    local TabList = Instance.new("ScrollingFrame")
    TabList.Name = "TabList"
    TabList.BackgroundTransparency = 1
    TabList.BorderSizePixel = 0
    TabList.Position = UDim2.new(0, 0, 0, 10)
    TabList.Size = UDim2.new(1, 0, 1, -20)
    TabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabList.ScrollBarThickness = 0
    TabList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    TabList.Parent = Sidebar
    
    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabListLayout.Parent = TabList
    
    -- Create Tab Function
    function Window:CreateTab(options)
        options = options or {}
        options.Title = options.Title or "Tab"
        options.Icon = options.Icon or "home"
        
        local Tab = {
            Sections = {}
        }
        
        -- Create Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = options.Title .. "Button"
        TabButton.BackgroundColor3 = SkyXUI.Theme.Second
        TabButton.BackgroundTransparency = 1
        TabButton.Size = UDim2.new(1, -20, 0, 40)
        TabButton.Font = Enum.Font.Gotham
        TabButton.Text = ""
        TabButton.Parent = TabList
        
        local TabIcon = Instance.new("ImageLabel")
        TabIcon.Name = "Icon"
        TabIcon.BackgroundTransparency = 1
        TabIcon.Position = UDim2.new(0, 15, 0.5, 0)
        TabIcon.Size = UDim2.new(0, 20, 0, 20)
        TabIcon.AnchorPoint = Vector2.new(0, 0.5)
        
        -- Check if icon is a valid rbxassetid
        if string.sub(options.Icon, 1, 13) == "rbxassetid://" then
            TabIcon.Image = options.Icon
        else
            -- Try to load from material icons
            TabIcon.Image = "rbxassetid://" .. (SkyXUI.Icons[options.Icon] or 6031074449) -- Default home icon if not found
        end
        
        TabIcon.Parent = TabButton
        
        local TabTitle = Instance.new("TextLabel")
        TabTitle.Name = "Title"
        TabTitle.BackgroundTransparency = 1
        TabTitle.Position = UDim2.new(0, 45, 0.5, 0)
        TabTitle.Size = UDim2.new(1, -55, 0.65, 0)
        TabTitle.Font = Enum.Font.Gotham
        TabTitle.Text = options.Title
        TabTitle.TextColor3 = SkyXUI.Theme.TextDark
        TabTitle.TextSize = 14
        TabTitle.TextXAlignment = Enum.TextXAlignment.Left
        TabTitle.AnchorPoint = Vector2.new(0, 0.5)
        TabTitle.Parent = TabButton
        
        -- Create Tab Container
        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Name = options.Title .. "Frame"
        TabFrame.BackgroundTransparency = 1
        TabFrame.BorderSizePixel = 0
        TabFrame.Size = UDim2.new(1, -20, 1, -20)
        TabFrame.Position = UDim2.new(0, 10, 0, 10)
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabFrame.ScrollBarThickness = 3
        TabFrame.ScrollBarImageColor3 = SkyXUI.Theme.Stroke
        TabFrame.Visible = false
        TabFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabFrame.Parent = TabContainer
        
        local TabFrameLayout = Instance.new("UIListLayout")
        TabFrameLayout.Padding = UDim.new(0, 10)
        TabFrameLayout.Parent = TabFrame
        
        -- Tab Button Functionality
        TabButton.MouseEnter:Connect(function()
            if Window.ActiveTab ~= Tab then
                Utils.Tween(TabButton, {BackgroundTransparency = 0.9}, 0.2)
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if Window.ActiveTab ~= Tab then
                Utils.Tween(TabButton, {BackgroundTransparency = 1}, 0.2)
            end
        end)
        
        TabButton.MouseButton1Click:Connect(function()
            Window:SelectTab(Tab)
        end)
        
        -- Add to tabs
        table.insert(Window.Tabs, Tab)
        Window.TabButtons[Tab] = TabButton
        
        -- Set active tab if first tab
        if #Window.Tabs == 1 then
            Window:SelectTab(Tab)
        end
        
        -- Create Section Function
        function Tab:CreateSection(title)
            local Section = {}
            
            -- Create Section Frame
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Name = title .. "Section"
            SectionFrame.BackgroundColor3 = SkyXUI.Theme.Second
            SectionFrame.BorderSizePixel = 0
            SectionFrame.Size = UDim2.new(1, 0, 0, 40)
            SectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            SectionFrame.Parent = TabFrame
            
            local SectionCorner = Instance.new("UICorner")
            SectionCorner.CornerRadius = UDim.new(0, 8)
            SectionCorner.Parent = SectionFrame
            
            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Name = "Title"
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Position = UDim2.new(0, 15, 0, 15)
            SectionTitle.Size = UDim2.new(1, -30, 0, 20)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = title
            SectionTitle.TextColor3 = SkyXUI.Theme.Text
            SectionTitle.TextSize = 14
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            SectionTitle.Parent = SectionFrame
            
            local SectionContainer = Instance.new("Frame")
            SectionContainer.Name = "Container"
            SectionContainer.BackgroundTransparency = 1
            SectionContainer.Position = UDim2.new(0, 0, 0, 40)
            SectionContainer.Size = UDim2.new(1, 0, 0, 0)
            SectionContainer.AutomaticSize = Enum.AutomaticSize.Y
            SectionContainer.Parent = SectionFrame
            
            local SectionLayout = Instance.new("UIListLayout")
            SectionLayout.Padding = UDim.new(0, 10)
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Parent = SectionContainer
            
            local SectionPadding = Instance.new("UIPadding")
            SectionPadding.PaddingLeft = UDim.new(0, 15)
            SectionPadding.PaddingRight = UDim.new(0, 15)
            SectionPadding.PaddingBottom = UDim.new(0, 10)
            SectionPadding.Parent = SectionContainer
            
            -- UI Elements
            
            -- Button
            function Section:CreateButton(options)
                options = options or {}
                options.Title = options.Title or "Button"
                options.Callback = options.Callback or function() end
                
                local Button = Instance.new("TextButton")
                Button.Name = options.Title .. "Button"
                Button.BackgroundColor3 = SkyXUI.Theme.Accent
                Button.Size = UDim2.new(1, 0, 0, 35)
                Button.Font = Enum.Font.Gotham
                Button.TextColor3 = SkyXUI.Theme.Text
                Button.TextSize = 14
                Button.Text = options.Title
                Button.ClipsDescendants = true
                Button.Parent = SectionContainer
                
                local ButtonCorner = Instance.new("UICorner")
                ButtonCorner.CornerRadius = UDim.new(0, 6)
                ButtonCorner.Parent = Button
                
                Button.MouseEnter:Connect(function()
                    Utils.Tween(Button, {BackgroundColor3 = Color3.fromRGB(
                        math.clamp(SkyXUI.Theme.Accent.R * 255 + 20, 0, 255),
                        math.clamp(SkyXUI.Theme.Accent.G * 255 + 20, 0, 255),
                        math.clamp(SkyXUI.Theme.Accent.B * 255 + 20, 0, 255)
                    )}, 0.2)
                end)
                
                Button.MouseLeave:Connect(function()
                    Utils.Tween(Button, {BackgroundColor3 = SkyXUI.Theme.Accent}, 0.2)
                end)
                
                Button.MouseButton1Down:Connect(function()
                    Utils.CreateRipple(Button)
                    Utils.Tween(Button, {BackgroundColor3 = Color3.fromRGB(
                        math.clamp(SkyXUI.Theme.Accent.R * 255 - 20, 0, 255),
                        math.clamp(SkyXUI.Theme.Accent.G * 255 - 20, 0, 255),
                        math.clamp(SkyXUI.Theme.Accent.B * 255 - 20, 0, 255)
                    )}, 0.2)
                end)
                
                Button.MouseButton1Up:Connect(function()
                    Utils.Tween(Button, {BackgroundColor3 = Color3.fromRGB(
                        math.clamp(SkyXUI.Theme.Accent.R * 255 + 20, 0, 255),
                        math.clamp(SkyXUI.Theme.Accent.G * 255 + 20, 0, 255),
                        math.clamp(SkyXUI.Theme.Accent.B * 255 + 20, 0, 255)
                    )}, 0.2)
                end)
                
                Button.MouseButton1Click:Connect(function()
                    options.Callback()
                end)
                
                return Button
            end
            
            -- Toggle
            function Section:CreateToggle(options)
                options = options or {}
                options.Title = options.Title or "Toggle"
                options.Default = options.Default or false
                options.Callback = options.Callback or function() end
                
                local Toggle = {
                    Value = options.Default,
                    Type = "Toggle"
                }
                
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Name = options.Title .. "Toggle"
                ToggleFrame.BackgroundTransparency = 1
                ToggleFrame.Size = UDim2.new(1, 0, 0, 35)
                ToggleFrame.Parent = SectionContainer
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Name = "Button"
                ToggleButton.BackgroundTransparency = 1
                ToggleButton.Size = UDim2.new(1, 0, 1, 0)
                ToggleButton.Text = ""
                ToggleButton.Parent = ToggleFrame
                
                local ToggleTitle = Instance.new("TextLabel")
                ToggleTitle.Name = "Title"
                ToggleTitle.BackgroundTransparency = 1
                ToggleTitle.Position = UDim2.new(0, 0, 0.5, 0)
                ToggleTitle.Size = UDim2.new(1, -50, 0.65, 0)
                ToggleTitle.Font = Enum.Font.Gotham
                ToggleTitle.Text = options.Title
                ToggleTitle.TextColor3 = SkyXUI.Theme.Text
                ToggleTitle.TextSize = 14
                ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
                ToggleTitle.AnchorPoint = Vector2.new(0, 0.5)
                ToggleTitle.Parent = ToggleFrame
                
                local ToggleIndicator = Instance.new("Frame")
                ToggleIndicator.Name = "Indicator"
                ToggleIndicator.BackgroundColor3 = SkyXUI.Theme.TextDark
                ToggleIndicator.BorderSizePixel = 0
                ToggleIndicator.Position = UDim2.new(1, -40, 0.5, 0)
                ToggleIndicator.Size = UDim2.new(0, 40, 0, 22)
                ToggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
                ToggleIndicator.Parent = ToggleFrame
                
                local ToggleCorner = Instance.new("UICorner")
                ToggleCorner.CornerRadius = UDim.new(1, 0)
                ToggleCorner.Parent = ToggleIndicator
                
                local ToggleCircle = Instance.new("Frame")
                ToggleCircle.Name = "Circle"
                ToggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleCircle.Position = UDim2.new(0, 2, 0.5, 0)
                ToggleCircle.Size = UDim2.new(0, 18, 0, 18)
                ToggleCircle.AnchorPoint = Vector2.new(0, 0.5)
                ToggleCircle.Parent = ToggleIndicator
                
                local ToggleCircleCorner = Instance.new("UICorner")
                ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
                ToggleCircleCorner.Parent = ToggleCircle
                
                -- Set initial state
                if Toggle.Value then
                    ToggleIndicator.BackgroundColor3 = SkyXUI.Theme.Accent
                    ToggleCircle.Position = UDim2.new(1, -20, 0.5, 0)
                end
                
                -- Toggle functionality
                local function UpdateToggle()
                    if Toggle.Value then
                        Utils.Tween(ToggleIndicator, {BackgroundColor3 = SkyXUI.Theme.Accent}, 0.2)
                        Utils.Tween(ToggleCircle, {Position = UDim2.new(1, -20, 0.5, 0)}, 0.2)
                    else
                        Utils.Tween(ToggleIndicator, {BackgroundColor3 = SkyXUI.Theme.TextDark}, 0.2)
                        Utils.Tween(ToggleCircle, {Position = UDim2.new(0, 2, 0.5, 0)}, 0.2)
                    end
                    
                    options.Callback(Toggle.Value)
                end
                
                ToggleButton.MouseButton1Click:Connect(function()
                    Toggle.Value = not Toggle.Value
                    UpdateToggle()
                end)
                
                -- Public methods
                function Toggle:SetValue(value)
                    if value ~= Toggle.Value then
                        Toggle.Value = value
                        UpdateToggle()
                    end
                end
                
                return Toggle
            end
            
            -- Slider
            function Section:CreateSlider(options)
                options = options or {}
                options.Title = options.Title or "Slider"
                options.Min = options.Min or 0
                options.Max = options.Max or 100
                options.Default = options.Default or 50
                options.Increment = options.Increment or 1
                options.Callback = options.Callback or function() end
                
                local Slider = {
                    Value = options.Default,
                    Min = options.Min,
                    Max = options.Max,
                    Type = "Slider"
                }
                
                -- Validate default value
                Slider.Value = math.clamp(Slider.Value, options.Min, options.Max)
                
                local SliderFrame = Instance.new("Frame")
                SliderFrame.Name = options.Title .. "Slider"
                SliderFrame.BackgroundTransparency = 1
                SliderFrame.Size = UDim2.new(1, 0, 0, 50)
                SliderFrame.Parent = SectionContainer
                
                local SliderTitle = Instance.new("TextLabel")
                SliderTitle.Name = "Title"
                SliderTitle.BackgroundTransparency = 1
                SliderTitle.Position = UDim2.new(0, 0, 0, 0)
                SliderTitle.Size = UDim2.new(0.7, 0, 0, 20)
                SliderTitle.Font = Enum.Font.Gotham
                SliderTitle.Text = options.Title
                SliderTitle.TextColor3 = SkyXUI.Theme.Text
                SliderTitle.TextSize = 14
                SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
                SliderTitle.Parent = SliderFrame
                
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "Value"
                SliderValue.BackgroundTransparency = 1
                SliderValue.Position = UDim2.new(0.7, 0, 0, 0)
                SliderValue.Size = UDim2.new(0.3, 0, 0, 20)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(Slider.Value)
                SliderValue.TextColor3 = SkyXUI.Theme.TextDark
                SliderValue.TextSize = 14
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                SliderValue.Parent = SliderFrame
                
                local SliderBar = Instance.new("Frame")
                SliderBar.Name = "Bar"
                SliderBar.BackgroundColor3 = SkyXUI.Theme.TextDark
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0, 0, 0, 30)
                SliderBar.Size = UDim2.new(1, 0, 0, 8)
                SliderBar.Parent = SliderFrame
                
                local SliderBarCorner = Instance.new("UICorner")
                SliderBarCorner.CornerRadius = UDim.new(1, 0)
                SliderBarCorner.Parent = SliderBar
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "Fill"
                SliderFill.BackgroundColor3 = SkyXUI.Theme.Accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 1, 0)
                SliderFill.Parent = SliderBar
                
                local SliderFillCorner = Instance.new("UICorner")
                SliderFillCorner.CornerRadius = UDim.new(1, 0)
                SliderFillCorner.Parent = SliderFill
                
                local SliderCircle = Instance.new("Frame")
                SliderCircle.Name = "Circle"
                SliderCircle.AnchorPoint = Vector2.new(0.5, 0.5)
                SliderCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderCircle.Position = UDim2.new(0, 0, 0.5, 0)
                SliderCircle.Size = UDim2.new(0, 14, 0, 14)
                SliderCircle.Parent = SliderFill
                
                local SliderCircleCorner = Instance.new("UICorner")
                SliderCircleCorner.CornerRadius = UDim.new(1, 0)
                SliderCircleCorner.Parent = SliderCircle
                
                -- Update slider position and value
                local function UpdateSlider(value, fromInput)
                    -- Clamp and increment
                    value = math.clamp(value, options.Min, options.Max)
                    if options.Increment > 0 then
                        value = math.floor(value / options.Increment + 0.5) * options.Increment
                    end
                    
                    Slider.Value = value
                    
                    -- Calculate percentage
                    local percent = (Slider.Value - options.Min) / (options.Max - options.Min)
                    
                    -- Update UI
                    SliderValue.Text = tostring(Slider.Value)
                    SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    
                    -- Callback
                    if fromInput then
                        options.Callback(Slider.Value)
                    end
                end
                
                -- Initial update
                UpdateSlider(Slider.Value, false)
                
                -- Slider interactions
                local isSliding = false
                
                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isSliding = true
                        
                        -- Update on first click
                        local percent = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                        local value = options.Min + (options.Max - options.Min) * percent
                        UpdateSlider(value, true)
                    end
                end)
                
                SliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isSliding = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and isSliding then
                        local percent = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                        local value = options.Min + (options.Max - options.Min) * percent
                        UpdateSlider(value, true)
                    end
                end)
                
                -- Public methods
                function Slider:SetValue(value)
                    UpdateSlider(value, true)
                end
                
                return Slider
            end
            
            -- Dropdown
            function Section:CreateDropdown(options)
                options = options or {}
                options.Title = options.Title or "Dropdown"
                options.Values = options.Values or {}
                options.Default = options.Default or nil
                options.Multi = options.Multi or false
                options.Callback = options.Callback or function() end
                
                local Dropdown = {
                    Value = options.Multi and (options.Default or {}) or options.Default,
                    Values = options.Values,
                    Multi = options.Multi,
                    Open = false,
                    Type = "Dropdown"
                }
                
                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.Name = options.Title .. "Dropdown"
                DropdownFrame.BackgroundTransparency = 1
                DropdownFrame.Size = UDim2.new(1, 0, 0, 40)
                DropdownFrame.ClipsDescendants = true
                DropdownFrame.Parent = SectionContainer
                
                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Name = "Button"
                DropdownButton.BackgroundColor3 = SkyXUI.Theme.Second
                DropdownButton.Size = UDim2.new(1, 0, 0, 40)
                DropdownButton.Position = UDim2.new(0, 0, 0, 0)
                DropdownButton.Font = Enum.Font.Gotham
                DropdownButton.TextColor3 = SkyXUI.Theme.Text
                DropdownButton.TextSize = 14
                DropdownButton.Text = ""
                DropdownButton.Parent = DropdownFrame
                
                local DropdownCorner = Instance.new("UICorner")
                DropdownCorner.CornerRadius = UDim.new(0, 6)
                DropdownCorner.Parent = DropdownButton
                
                local DropdownTitle = Instance.new("TextLabel")
                DropdownTitle.Name = "Title"
                DropdownTitle.BackgroundTransparency = 1
                DropdownTitle.Position = UDim2.new(0, 15, 0.5, 0)
                DropdownTitle.Size = UDim2.new(0.8, 0, 0.65, 0)
                DropdownTitle.Font = Enum.Font.Gotham
                DropdownTitle.Text = options.Title
                DropdownTitle.TextColor3 = SkyXUI.Theme.Text
                DropdownTitle.TextSize = 14
                DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                DropdownTitle.AnchorPoint = Vector2.new(0, 0.5)
                DropdownTitle.Parent = DropdownButton
                
                local DropdownValue = Instance.new("TextLabel")
                DropdownValue.Name = "Value"
                DropdownValue.BackgroundTransparency = 1
                DropdownValue.Position = UDim2.new(1, -40, 0.5, 0)
                DropdownValue.Size = UDim2.new(0.5, 0, 0.65, 0)
                DropdownValue.Font = Enum.Font.Gotham
                
                -- Set initial text
                if Dropdown.Multi then
                    if #Dropdown.Value > 0 then
                        local displayText = ""
                        for i, v in ipairs(Dropdown.Value) do
                            displayText = displayText .. v .. (i < #Dropdown.Value and ", " or "")
                        end
                        DropdownValue.Text = displayText
                    else
                        DropdownValue.Text = "None"
                    end
                else
                    DropdownValue.Text = tostring(Dropdown.Value or "None")
                end
                
                DropdownValue.TextColor3 = SkyXUI.Theme.TextDark
                DropdownValue.TextSize = 14
                DropdownValue.TextXAlignment = Enum.TextXAlignment.Right
                DropdownValue.AnchorPoint = Vector2.new(1, 0.5)
                DropdownValue.Parent = DropdownButton
                
                local DropdownIcon = Instance.new("ImageLabel")
                DropdownIcon.Name = "Icon"
                DropdownIcon.BackgroundTransparency = 1
                DropdownIcon.Position = UDim2.new(1, -15, 0.5, 0)
                DropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                DropdownIcon.Image = "rbxassetid://7733717463"
                DropdownIcon.ImageColor3 = SkyXUI.Theme.TextDark
                DropdownIcon.AnchorPoint = Vector2.new(1, 0.5)
                DropdownIcon.Parent = DropdownButton
                
                local DropdownContainer = Instance.new("Frame")
                DropdownContainer.Name = "Container"
                DropdownContainer.BackgroundTransparency = 1
                DropdownContainer.Position = UDim2.new(0, 0, 0, 45)
                DropdownContainer.Size = UDim2.new(1, 0, 0, 0)
                DropdownContainer.ClipsDescendants = true
                DropdownContainer.Visible = false
                DropdownContainer.Parent = DropdownFrame
                
                local DropdownList = Instance.new("ScrollingFrame")
                DropdownList.Name = "List"
                DropdownList.BackgroundTransparency = 1
                DropdownList.BorderSizePixel = 0
                DropdownList.Position = UDim2.new(0, 0, 0, 0)
                DropdownList.Size = UDim2.new(1, 0, 1, 0)
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
                DropdownList.ScrollBarThickness = 3
                DropdownList.ScrollBarImageColor3 = SkyXUI.Theme.TextDark
                DropdownList.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
                DropdownList.Parent = DropdownContainer
                
                local DropdownListLayout = Instance.new("UIListLayout")
                DropdownListLayout.Padding = UDim.new(0, 5)
                DropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownListLayout.Parent = DropdownList
                
                -- Add values to dropdown
                for _, value in ipairs(options.Values) do
                    local ValueButton = Instance.new("TextButton")
                    ValueButton.Name = "Value"
                    ValueButton.BackgroundColor3 = SkyXUI.Theme.Second
                    ValueButton.Size = UDim2.new(1, -10, 0, 30)
                    ValueButton.Font = Enum.Font.Gotham
                    ValueButton.Text = tostring(value)
                    ValueButton.TextColor3 = SkyXUI.Theme.Text
                    ValueButton.TextSize = 14
                    ValueButton.Parent = DropdownList
                    
                    local ValueCorner = Instance.new("UICorner")
                    ValueCorner.CornerRadius = UDim.new(0, 6)
                    ValueCorner.Parent = ValueButton
                    
                    -- Check if selected
                    if Dropdown.Multi then
                        for _, v in ipairs(Dropdown.Value) do
                            if v == value then
                                ValueButton.BackgroundColor3 = SkyXUI.Theme.Accent
                                break
                            end
                        end
                    else
                        if Dropdown.Value == value then
                            ValueButton.BackgroundColor3 = SkyXUI.Theme.Accent
                        end
                    end
                    
                    -- Value selection
                    ValueButton.MouseButton1Click:Connect(function()
                        if Dropdown.Multi then
                            -- Toggle multiple values
                            local found = false
                            for i, v in ipairs(Dropdown.Value) do
                                if v == value then
                                    table.remove(Dropdown.Value, i)
                                    found = true
                                    break
                                end
                            end
                            
                            if not found then
                                table.insert(Dropdown.Value, value)
                                ValueButton.BackgroundColor3 = SkyXUI.Theme.Accent
                            else
                                ValueButton.BackgroundColor3 = SkyXUI.Theme.Second
                            end
                            
                            -- Update displayed value
                            if #Dropdown.Value > 0 then
                                local displayText = ""
                                for i, v in ipairs(Dropdown.Value) do
                                    displayText = displayText .. v .. (i < #Dropdown.Value and ", " or "")
                                end
                                DropdownValue.Text = displayText
                            else
                                DropdownValue.Text = "None"
                            end
                            
                            options.Callback(Dropdown.Value)
                        else
                            -- Single selection
                            Dropdown.Value = value
                            DropdownValue.Text = tostring(value)
                            
                            -- Update visual
                            for _, child in ipairs(DropdownList:GetChildren()) do
                                if child:IsA("TextButton") then
                                    if child.Text == tostring(value) then
                                        child.BackgroundColor3 = SkyXUI.Theme.Accent
                                    else
                                        child.BackgroundColor3 = SkyXUI.Theme.Second
                                    end
                                end
                            end
                            
                            options.Callback(Dropdown.Value)
                            
                            -- Close dropdown
                            Dropdown:Toggle(false)
                        end
                    end)
                    
                    -- Hover effects
                    ValueButton.MouseEnter:Connect(function()
                        if (Dropdown.Multi and not table.find(Dropdown.Value, value)) or
                           (not Dropdown.Multi and Dropdown.Value ~= value) then
                            Utils.Tween(ValueButton, {BackgroundColor3 = Color3.fromRGB(
                                math.clamp(SkyXUI.Theme.Second.R * 255 + 10, 0, 255),
                                math.clamp(SkyXUI.Theme.Second.G * 255 + 10, 0, 255),
                                math.clamp(SkyXUI.Theme.Second.B * 255 + 10, 0, 255)
                            )}, 0.2)
                        end
                    end)
                    
                    ValueButton.MouseLeave:Connect(function()
                        if (Dropdown.Multi and not table.find(Dropdown.Value, value)) or
                           (not Dropdown.Multi and Dropdown.Value ~= value) then
                            Utils.Tween(ValueButton, {BackgroundColor3 = SkyXUI.Theme.Second}, 0.2)
                        end
                    end)
                end
                
                -- Auto-size list
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, DropdownListLayout.AbsoluteContentSize.Y)
                
                -- Toggle dropdown
                function Dropdown:Toggle(state)
                    if state ~= nil then
                        Dropdown.Open = state
                    else
                        Dropdown.Open = not Dropdown.Open
                    end
                    
                    if Dropdown.Open then
                        -- Show dropdown
                        DropdownContainer.Visible = true
                        
                        -- Calculate height based on number of options (max 150px)
                        local numValues = #options.Values
                        local listHeight = math.min(numValues * 35, 150)
                        
                        -- Animate dropdown opening
                        Utils.Tween(DropdownIcon, {Rotation = 180}, 0.2)
                        Utils.Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 40 + listHeight + 10)}, 0.2)
                        Utils.Tween(DropdownContainer, {Size = UDim2.new(1, 0, 0, listHeight)}, 0.2)
                    else
                        -- Animate dropdown closing
                        Utils.Tween(DropdownIcon, {Rotation = 0}, 0.2)
                        Utils.Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 40)}, 0.2)
                        Utils.Tween(DropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        
                        -- Hide after animation
                        task.spawn(function()
                            task.wait(0.2)
                            if not Dropdown.Open then
                                DropdownContainer.Visible = false
                            end
                        end)
                    end
                end
                
                -- Button functionality
                DropdownButton.MouseButton1Click:Connect(function()
                    Dropdown:Toggle()
                end)
                
                -- Public methods
                function Dropdown:SetValue(value)
                    if Dropdown.Multi then
                        -- Set multiple values
                        Dropdown.Value = value
                        
                        -- Update UI
                        for _, child in ipairs(DropdownList:GetChildren()) do
                            if child:IsA("TextButton") then
                                if table.find(value, child.Text) then
                                    child.BackgroundColor3 = SkyXUI.Theme.Accent
                                else
                                    child.BackgroundColor3 = SkyXUI.Theme.Second
                                end
                            end
                        end
                        
                        -- Update displayed text
                        if #Dropdown.Value > 0 then
                            local displayText = ""
                            for i, v in ipairs(Dropdown.Value) do
                                displayText = displayText .. v .. (i < #Dropdown.Value and ", " or "")
                            end
                            DropdownValue.Text = displayText
                        else
                            DropdownValue.Text = "None"
                        end
                    else
                        -- Set single value
                        Dropdown.Value = value
                        DropdownValue.Text = tostring(value)
                        
                        -- Update UI
                        for _, child in ipairs(DropdownList:GetChildren()) do
                            if child:IsA("TextButton") then
                                if child.Text == tostring(value) then
                                    child.BackgroundColor3 = SkyXUI.Theme.Accent
                                else
                                    child.BackgroundColor3 = SkyXUI.Theme.Second
                                end
                            end
                        end
                    end
                    
                    options.Callback(Dropdown.Value)
                end
                
                return Dropdown
            end
            
            -- Paragraph
            function Section:CreateParagraph(options)
                options = options or {}
                options.Title = options.Title or "Title"
                options.Content = options.Content or "Content"
                
                local ParagraphFrame = Instance.new("Frame")
                ParagraphFrame.Name = "Paragraph"
                ParagraphFrame.BackgroundTransparency = 1
                ParagraphFrame.Size = UDim2.new(1, 0, 0, 60)
                ParagraphFrame.BackgroundColor3 = SkyXUI.Theme.Second
                ParagraphFrame.BorderSizePixel = 0
                ParagraphFrame.Parent = SectionContainer
                
                local Corner = Instance.new("UICorner")
                Corner.CornerRadius = UDim.new(0, 6)
                Corner.Parent = ParagraphFrame
                
                local Title = Instance.new("TextLabel")
                Title.Name = "Title"
                Title.BackgroundTransparency = 1
                Title.Position = UDim2.new(0, 10, 0, 5)
                Title.Size = UDim2.new(1, -20, 0, 20)
                Title.Font = Enum.Font.GothamSemibold
                Title.Text = options.Title
                Title.TextColor3 = SkyXUI.Theme.Text
                Title.TextSize = 14
                Title.TextXAlignment = Enum.TextXAlignment.Left
                Title.TextWrapped = true
                Title.Parent = ParagraphFrame
                
                local Content = Instance.new("TextLabel")
                Content.Name = "Content"
                Content.BackgroundTransparency = 1
                Content.Position = UDim2.new(0, 10, 0, 30)
                Content.Size = UDim2.new(1, -20, 0, 20)
                Content.Font = Enum.Font.Gotham
                Content.Text = options.Content
                Content.TextColor3 = SkyXUI.Theme.TextDark
                Content.TextSize = 14
                Content.TextXAlignment = Enum.TextXAlignment.Left
                Content.TextYAlignment = Enum.TextYAlignment.Top
                Content.TextWrapped = true
                Content.Parent = ParagraphFrame
                
                -- Auto-adjust height based on text content
                local function UpdateHeight()
                    local contentHeight = TextService:GetTextSize(
                        Content.Text,
                        Content.TextSize,
                        Content.Font,
                        Vector2.new(Content.AbsoluteSize.X, math.huge)
                    ).Y
                    
                    Content.Size = UDim2.new(1, -20, 0, contentHeight)
                    ParagraphFrame.Size = UDim2.new(1, 0, 0, contentHeight + 35)
                end
                
                UpdateHeight()
                Content:GetPropertyChangedSignal("Text"):Connect(UpdateHeight)
                Content:GetPropertyChangedSignal("AbsoluteSize"):Connect(UpdateHeight)
                
                return ParagraphFrame
            end
            
            -- Keybind
            function Section:CreateKeybind(options)
                options = options or {}
                options.Title = options.Title or "Keybind"
                options.Default = options.Default or "None"
                options.Callback = options.Callback or function() end
                
                local Keybind = {
                    Value = options.Default,
                    Listening = false,
                    Type = "Keybind"
                }
                
                local KeybindFrame = Instance.new("Frame")
                KeybindFrame.Name = options.Title .. "Keybind"
                KeybindFrame.BackgroundTransparency = 1
                KeybindFrame.Size = UDim2.new(1, 0, 0, 35)
                KeybindFrame.Parent = SectionContainer
                
                local KeybindButton = Instance.new("TextButton")
                KeybindButton.Name = "Button"
                KeybindButton.BackgroundTransparency = 1
                KeybindButton.Size = UDim2.new(1, 0, 1, 0)
                KeybindButton.Text = ""
                KeybindButton.Parent = KeybindFrame
                
                local KeybindTitle = Instance.new("TextLabel")
                KeybindTitle.Name = "Title"
                KeybindTitle.BackgroundTransparency = 1
                KeybindTitle.Position = UDim2.new(0, 0, 0.5, 0)
                KeybindTitle.Size = UDim2.new(0.5, 0, 0.65, 0)
                KeybindTitle.Font = Enum.Font.Gotham
                KeybindTitle.Text = options.Title
                KeybindTitle.TextColor3 = SkyXUI.Theme.Text
                KeybindTitle.TextSize = 14
                KeybindTitle.TextXAlignment = Enum.TextXAlignment.Left
                KeybindTitle.AnchorPoint = Vector2.new(0, 0.5)
                KeybindTitle.Parent = KeybindFrame
                
                local KeybindValue = Instance.new("TextButton")
                KeybindValue.Name = "Value"
                KeybindValue.AnchorPoint = Vector2.new(1, 0.5)
                KeybindValue.BackgroundColor3 = SkyXUI.Theme.Second
                KeybindValue.Position = UDim2.new(1, 0, 0.5, 0)
                KeybindValue.Size = UDim2.new(0, 100, 0, 26)
                KeybindValue.Font = Enum.Font.Gotham
                KeybindValue.Text = options.Default
                KeybindValue.TextColor3 = SkyXUI.Theme.Text
                KeybindValue.TextSize = 14
                KeybindValue.Parent = KeybindFrame
                
                local KeybindValueCorner = Instance.new("UICorner")
                KeybindValueCorner.CornerRadius = UDim.new(0, 6)
                KeybindValueCorner.Parent = KeybindValue
                
                -- Value button functionality
                KeybindValue.MouseButton1Click:Connect(function()
                    if Keybind.Listening then return end
                    
                    Keybind.Listening = true
                    KeybindValue.Text = "..."
                    
                    -- Listen for key press
                    local connection
                    connection = UserInputService.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            local keyName = input.KeyCode.Name
                            
                            if keyName == "Escape" then
                                -- Cancel keybind
                                Keybind.Value = "None"
                                KeybindValue.Text = "None"
                            else
                                -- Set keybind
                                Keybind.Value = keyName
                                KeybindValue.Text = keyName
                            end
                            
                            Keybind.Listening = false
                            connection:Disconnect()
                        end
                    end)
                end)
                
                -- Listen for keybind press
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard and
                       input.KeyCode.Name == Keybind.Value and
                       not Keybind.Listening then
                        options.Callback()
                    end
                end)
                
                -- Public methods
                function Keybind:SetValue(value)
                    Keybind.Value = value
                    KeybindValue.Text = value
                end
                
                return Keybind
            end
            
            return Section
        end
        
        return Tab
    end
    
    -- Select Tab Function
    function Window:SelectTab(tab)
        -- Deselect current tab
        if Window.ActiveTab then
            local button = Window.TabButtons[Window.ActiveTab]
            Utils.Tween(button, {BackgroundTransparency = 1}, 0.2)
            
            -- Hide current tab
            for _, frame in pairs(TabContainer:GetChildren()) do
                if frame.Name == Window.ActiveTab.Name .. "Frame" then
                    frame.Visible = false
                end
            end
        end
        
        -- Select new tab
        Window.ActiveTab = tab
        
        -- Highlight tab button
        local button = Window.TabButtons[tab]
        Utils.Tween(button, {BackgroundTransparency = 0.8}, 0.2)
        
        -- Show tab content
        for _, frame in pairs(TabContainer:GetChildren()) do
            if frame.Name == tab.Name .. "Frame" then
                frame.Visible = true
            end
        end
    end
    
    -- Add the window to the list
    table.insert(self.Windows, Window)
    
    -- Add watermark
    local Watermark = Instance.new("TextLabel")
    Watermark.Name = "Watermark"
    Watermark.BackgroundTransparency = 1
    Watermark.Position = UDim2.new(0, 10, 1, -25)
    Watermark.Size = UDim2.new(0, 200, 0, 20)
    Watermark.Font = Enum.Font.Gotham
    Watermark.Text = "SkyX UI v" .. self.Version
    Watermark.TextColor3 = self.Theme.TextDark
    Watermark.TextSize = 12
    Watermark.TextXAlignment = Enum.TextXAlignment.Left
    Watermark.Parent = Window.MainFrame
    
    return Window
end

-- Game Detection
function SkyXUI:DetectGame()
    local gameId = game.PlaceId
    local games = {
        [6284583030] = "Pet Simulator X",
        [7449423635] = "Blade Ball",
        [2753915549] = "Blox Fruits",
        [1962086868] = "Tower of Hell",
        [155615604] = "Prison Life",
        [4623386862] = "Piggy",
        [142823291] = "Murder Mystery 2",
        [537413528] = "Build A Boat",
        [189707] = "Natural Disaster Survival",
        [8304191830] = "Anime Adventures"
        -- Add more games as needed
    }
    
    return {
        Id = gameId,
        Name = games[gameId] or "Unknown Game"
    }
end

-- Initialize
function SkyXUI:Init()
    -- Create notification interface
    self:CreateInterface()
    
    -- Add key bind hooks for toggling UI
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.RightControl then
            -- Toggle all windows
            for _, window in ipairs(self.Windows) do
                window.Toggled = not window.Toggled
                
                if window.Toggled then
                    window.ScreenGui.Enabled = true
                    Utils.Tween(window.MainFrame, {Size = window.MainFrame.Size}, 0.5, Enum.EasingStyle.Quint)
                else
                    Utils.Tween(window.MainFrame, {Size = UDim2.new(0, window.MainFrame.Size.X.Offset, 0, 0)}, 0.5, Enum.EasingStyle.Quint)
                    task.spawn(function()
                        task.wait(0.5)
                        if not window.Toggled then
                            window.ScreenGui.Enabled = false
                        end
                    end)
                end
            end
        end
    end)
    
    -- Generate icons table
    self.Icons = {
        home = "7733960981",
        settings = "7734053495",
        search = "7734039095",
        players = "7733774602",
        credit = "7733925945",
        warning = "7734309572",
        info = "7734021302",
        plus = "7734236959",
        minus = "7734299470",
        server = "7734190620",
        shield = "7734201804",
        world = "7734310819",
        close = "7733717689",
        -- Add more icons as needed
    }
    
    print("SkyX UI Library Initialized")
    return self
end

-- Return the library
return SkyXUI:Init()
